# Jump to matching bracket: mm 
# Reload file from disk: :reload<ret>
# Run shell command: :sh command
# Open file: :open <filename>
# Delete word under cursor:  bed
# Yank word under cursor: bey
# Select up to and including chr: f<chr>  
# Select entire line: x
#    continue typing x to select more lines
# Search and replace current selection: sfoo<ret>cbar<esc>
#    supports regex selections: s +<ret>_<esc> will replace spaces with _
# Search and replace globally: %sfoo<ret>cbar<esc>#    
# Duplicate cursor: C
#    exit with ,
# Make all chars lowercase: `
#    Toggle case: ~
# C-s to save jumplist position; C-o to go back to it
# C-a to increment number under cursor; C-x to decrement

# Helix Language Configuration: https://docs.helix-editor.com/languages.html
# Helix Keybindings: https://docs.helix-editor.com/remapping.html
# Language Server Support: https://docs.helix-editor.com/lang-support.html
# Language Server Install Guide: https://github.com/helix-editor/helix/wiki/How-to-install-the-default-language-servers
# Vim to Helix migration: https://github.com/helix-editor/helix/wiki/Migrating-from-Vim
# Vim to Helix config sample: https://github.com/LGUG2Z/helix-vim/blob/master/config.toml
# Helix Source w/ Commands: https://github.com/helix-editor/helix/blob/master/helix-term/src/commands.rs

    
theme = "onedark"

[editor]
mouse = false

[editor.cursor-shape]
insert = "bar"
normal = "block"
select = "underline"

[keys.normal]
# Search for word under cursor
"*" = ["move_char_right", "move_prev_word_start", "move_next_word_end", "search_selection", "search_next"]
"#" = ["move_char_right", "move_prev_word_start", "move_next_word_end", "search_selection", "search_prev"]

# p = ["paste_clipboard_after", "collapse_selection"]
# P = ["paste_clipboard_before", "collapse_selection"]
D = ["extend_to_line_end", "yank_main_selection_to_clipboard", "delete_selection"]

# Make j and k behave as they do Vim when soft-wrap is enabled
# j = "move_line_down"
# k = "move_line_up"

# Shift + hjkl to move farther
H = ["move_char_left", "move_char_left", "move_char_left", "move_char_left", "move_char_left", "move_char_left", "move_char_left", "move_char_left", "move_char_left", "move_char_left"]
L = ["move_char_right", "move_char_right", "move_char_right", "move_char_right", "move_char_right", "move_char_right", "move_char_right", "move_char_right", "move_char_right", "move_char_right"]
J = ["move_visual_line_down", "move_visual_line_down", "move_visual_line_down", "move_visual_line_down", "move_visual_line_down"]
K = ["move_visual_line_up", "move_visual_line_up", "move_visual_line_up", "move_visual_line_up", "move_visual_line_up"]

g.k = ["goto_file_start"]
g.j = ["goto_file_end"]

# y.y = ["extend_to_line_bounds", "yank_main_selection_to_clipboard", "normal_mode", "collapse_selection", "goto_line_start"]
# y = ["yank_main_selection_to_clipboard", "normal_mode", "collapse_selection"]

# d.d = ["extend_to_line_bounds", "yank_main_selection_to_clipboard", "delete_selection"]
# d.h = ["select_mode", "move_char_left" , "delete_selection"]
# d.l = ["select_mode",  "delete_selection"]
# d.w = ["select_mode", "move_next_word_end", "delete_selection"]

[keys.select]
# p = "replace_selections_with_clipboard" 
# P = "paste_clipboard_before"
 
# Make j and k behave as they do Vim when soft-wrap is enabled
# j = ["extend_line_down", "extend_to_line_bounds"]
# k = ["extend_line_up", "extend_to_line_bounds"]

# Shift + hjkl to move farther
H = ["extend_char_left", "extend_char_left", "extend_char_left", "extend_char_left", "extend_char_left", "extend_char_left", "extend_char_left", "extend_char_left", "extend_char_left", "extend_char_left"]
L = ["extend_char_right", "extend_char_right", "extend_char_right", "extend_char_right", "extend_char_right", "extend_char_right", "extend_char_right", "extend_char_right", "extend_char_right", "extend_char_right"]
J = ["extend_line_down", "extend_line_down", "extend_line_down", "extend_line_down", "extend_line_down", "extend_to_line_bounds"]
K = ["extend_line_up", "extend_line_up", "extend_line_up", "extend_line_up", "extend_line_up", "extend_to_line_bounds"]

g.k = ["goto_file_start"]
g.j = ["goto_file_end"]

